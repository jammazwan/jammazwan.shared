transform(constant("foo")
transform(body().regexReplaceAll("\n", "<br/>")
transform().simple("${body.toUpperCase()}")
transform(method("myBean")
transform().method("bean:foo").to("mock:b")
transform(body().prepend("FOOTER:")
transform(body().append(" World"))
transform().constant("{{env:JAVA_HOME}}")
transform().constant("{{elephant}}")
transform().simple("Hi ${body} do you think ${properties:cool.name} rocks?")
transform().simple("Hi ${body} do you think ${properties:unknown:Beer} rocks?")
transform().simple("Bye ${body}")
transform().constant("{{service.host:FOO}}:{{service.port:FOO}}")
transform().constant("{{service.host:BAR:myotherserver}}:{{service.port:BAR:8888}}")
transform().constant("{{service.host:FOO}}:8888")
transform().constant("{{service.host:BAR:myotherserver}}:8888")
transform().constant("someserver:{{service.port:FOO}}")
transform().constant("myotherserver:{{service.port:BAR:8888}}")
transform().constant("{{service:FOO}}")
transform().constant("{{service:BAR:myotherserver:8888}}")
transform().simple("Hi ${body}. ${properties-location:org/apache/camel/component/properties/bar.properties:bar.quote}.")
transform(staxSource, new StreamResult(baos)
transform(simple("Hello ${body}")
transform(method(IncreaseOne.class)).
transform().simple("<results>${in.body}</results>")
transform().simple("<index>${in.header.CamelSplitIndex}</index>${in.body}")
transform().method(MyReallyCoolBean.class, "getOther[xx")
transform().method(MyReallyCoolBean.class, "getOther.greet")
transform().simple("${messageHistory(false)}")
transform().simple("${messageHistory}")
transform().simple("resource:classpath:mysimple.txt")
transform().xpath("/root/name")
transform().xpath("resource:classpath:myxpath.txt")
transform(simple("Damn ${exception.message}")
transform(exceptionMessage()
transform(sendTo("bar")
transform().method(TypeConverterRegistryStatsPerformanceTest.class, "transformMe")
transform().language("constant", "Hello World")
transform().groovy("resource:classpath:mygroovy.groovy")
transform(ack()
transform(ack(AcknowledgmentCode.CA)
transform(ack()).end()
transform(terser("/.BLORG")
transform(ack(AcknowledgmentCode.AR, "Problem!", ErrorCode.APPLICATION_INTERNAL_ERROR)).end()
transform(convertLFToCR()
transform(getMockEndpoint(mockEndpoint).getExchanges(), new Function<Exchange, Integer>()
transform(header(Exchange.HTTP_URI)
transform().simple("${header.phrase} ${body}")
transform()simple("Bye ${header.name}")
transform(exceptionMessage()).to(getUri()
transform().sql("resource:classpath:myjosql.txt")
transform().simple("${body[0][0]}")
transform().jsonpath("$.store.book[*].title").to("mock:authors")
transform().jsonpath("$.store.book[0].title", String.class)
transform().jsonpath("$.store.book[1].title", String.class)
transform().jsonpath("$.store.book[0].price", Float.class)
transform().jsonpath("$.store.book[*].author")
transform().el("resource:classpath:juel.txt")
transform().jxpath("resource:classpath:myjxpath.txt")
transform(constant(null)
transform(body().convertToString()
transform().method(NettyHttpAccessHttpRequestAndResponseBeanTest.class, "myTransformer")
transform(body().regexReplaceAll("Hello", "Bye")
transform().xquery("resource:classpath:myxquery.txt", String.class)
transform().xquery("/people/person[@name='Jonathan']")
transform().xquery("/people/person/text()", String.class)
transform().xquery("/person/id", String.class)
transform().xquery("/person/@city", String.class)
transform().javaScript("resource:classpath:myjavascript.js")
transform().constant("{ \"reply\": \"Bye World\" }")
transform().constant("{ \"reply\": \"Bye World\" }")
transform().constant("{ \"reply\": \"Bye World\" }")
transform().spel("resource:classpath:myspel.txt")
transform().simple("The project is ${body[project]}")
transform().simple("${header.CamelHttpUrl}?${header.CamelHttpQuery}")
transform("/org/apache/camel/component/xmlsecurity/xslt_test.xsl")